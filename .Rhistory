literacy.roll[literacy.roll$id %in% na.id, "group"]
class_roll0912[class_roll0912$id %in% na.id, "id"]
class_roll0912[class_roll0912$id %in% na.id, "group"]
literacy.2 <- literacy.roll.2[, 7:32]
literacy.roll.2 <- literacy.roll[fix.o.2, ]
literacy.roll.2$group <- class_roll0912$group
literacy <- literacy.roll[, 7:32]
literacy.2 <- literacy.roll.2[, 7:32]
head(literacy, n = 10)
head(literacy.2, n = 10)
literacy
literacy.roll <- read.xlsx("../data/literacy_RnB0912.xlsx", 1, startRow = 3, endRow  = 102, colIndex = c(3:7, 9:35), colClasses = c(rep("character", 32)), header = FALSE, stringsAsFactors = FALSE)
names(literacy.roll) <- c("dept", "id", "name", "year", "e.mail", "cell.no", paste("Q", 1:25, sep = ""), "group")
(na.group <- is.na(literacy.roll$group))
table(literacy.roll$group, exclude = NULL)
na.id <- literacy.roll$id[na.group]
# load("./red_and_black_160907_data.rda")
class_roll0907 <- read.xlsx("../data/quiz0907.xlsx", 1, startRow = 3, endRow = 102, colIndex = c(3:7, 9:14), colClasses = c(rep("character", 11)), header = FALSE, stringsAsFactors = FALSE)
class_roll0912 <- read.xlsx("../data/class_roll0912.xlsx", 1, startRow = 3, endRow = 102, colIndex = c(3:7, 9:10), colClasses = c(rep("character", 7)), header = FALSE, stringsAsFactors = FALSE)
names(class_roll0907) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "Q1", "Q2", "Q3", "Q4", "group")
names(class_roll0912) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "group")
class_roll0912[class_roll0912$id %in% na.id, "group"]
fix.o <- match(class_roll0907$id, class_roll0912$id)
fix.o.2 <- match(class_roll0912$id, class_roll0907$id)
class_roll0907$group <- factor(class_roll0907$group, levels = c("Red", "Black"))
class_roll0912$group <- factor(class_roll0912$group, levels = c("Red", "Black"))
(literacy.roll$group <- factor(literacy.roll$group, levels = c("red", "black"), labels = c("Red", "Black")))
(literacy.roll[literacy.roll$id %in% na.id, "group"] <- class_roll0912[class_roll0912$id %in% na.id, "group"])
table(literacy.roll$group)
literacy.roll.2 <- literacy.roll[fix.o.2, ]
literacy.roll.2$group <- class_roll0912$group
literacy <- literacy.roll[, 7:32]
literacy.2 <- literacy.roll.2[, 7:32]
head(literacy, n = 10)
head(literacy.2, n = 10)
kable(literacy)
kable(literacy.2)
literacy.roll <- read.xlsx("../data/literacy_RnB0912.xlsx", 1, startRow = 3, endRow  = 102, colIndex = c(3:7, 9:35), colClasses = c(rep("character", 32)), header = FALSE, stringsAsFactors = FALSE)
names(literacy.roll) <- c("dept", "id", "name", "year", "e.mail", "cell.no", paste("Q", 1:25, sep = ""), "group")
(na.group <- is.na(literacy.roll$group))
table(literacy.roll$group, exclude = NULL)
(na.id <- literacy.roll$id[na.group])
literacy.roll[literacy.roll$id %in% na.id, "id"]
literacy.roll[literacy.roll$id %in% na.id, "group"]
class_roll0912[class_roll0912$id %in% na.id, "id"]
class_roll0912[class_roll0912$id %in% na.id, "group"]
(ans <- scan("../data/literacy_ans.txt", what = ""))
(ans.l <- split(ans, f = paste("A", 1:25, sep="")))
?split
ans.l
(ans.l.2 <- ans.l[paste("A", 1:25, sep = "")])
ans.l["A10"]
ans.l["A2"]
ans.l[paste("A", 1:25, sep = "")]
str(literacy[, -26])
ans.l.2 == literacy[1, -26]
str(ans.l.2)
unlist(ans.l.2)
unlist(ans.l.2) == literacy[1, -26]
unlist(ans.l.2) == literacy[2, -26]
sapply(literacy[, -26], function(x, y) factor(ifelse(x == y, "R", "W"), y = ans.l.2))
sapply(literacy[, -26], function(x, y) {factor(ifelse(x == y, "R", "W"), y = ans.l.2)})
sapply(literacy[, -26], function(x, y) {factor(ifelse(x == y, "R", "W")), y = ans.l.2)})
sapply(literacy[, -26], function(x, y = ans.l.2) {factor(ifelse(x == y, "R", "W"))})
literacy.marks.rw <- mapply(function(x, y) factor(ifelse(x == y, "R", "W")), y = ans.l.2, literacy[, -26])
pander(literacy.marks.rw)
library(pander)
pander(literacy.marks.rw)
literacy.marks.rw <- mapply(function(x, y = ans.l.2) factor(ifelse(x == y, "R", "W")), literacy[, -26])
pander(literacy.marks.rw)
literacy.marks.rw <- mapply(function(x, y) factor(ifelse(x == y, "R", "W")), y = ans.l.2[1:3], literacy[1:3, -26])
literacy.marks.rw <- mapply(function(x, y) factor(ifelse(x == y, "R", "W")), y = ans.l.2[1:3], literacy[, 1:3])
literacy.marks.rw
literacy.marks <- ifelse(literacy.marks.rw == "R", 1, 0)
literacy.score <- apply(literacy.marks, 1, sum, na.rm = TRUE) * 4
literacy.marks.rw <- mapply(function(x, y) factor(ifelse(x == y, "R", "W")), y = ans.l.2, literacy[, -26])
literacy.marks <- ifelse(literacy.marks.rw == "R", 1, 0)
literacy.score <- apply(literacy.marks, 1, sum, na.rm = TRUE) * 4
literacy.score[literacy.score == 0] <- NA
which(literacy.score < 60)
literacy.score[c(57, 61)]
apply(literacy.marks.rw, 1, function(x) all(is.na(x)))
is.na(literacy.marks.rw[1, ])
all(is.na(literacy.marks.rw[1, ]))
all(is.na(literacy.marks.rw[10, ]))
all(is.na(literacy.marks.rw[74, ]))
is.na(literacy.marks.rw[74, ])
literacy.marks.2 <- literacy.marks.rw
literacy.marks.2[is.na(literacy.marks.2)] <- "W"
literacy.marks.2[na.all, ] <- NA
apply(literacy.marks.rw, 1, function(x) all(is.na(x)))
na.all <- which(apply(literacy.marks.rw, 1, function(x) all(is.na(x))))
literacy.marks.2 <- literacy.marks.rw
literacy.marks.2[is.na(literacy.marks.2)] <- "W"
literacy.marks.2[na.all, ] <- NA
literacy.marks.2 <- ifelse(literacy.marks.2 == "R", 1, 0)
rate.by.item <- apply(literacy.marks.2, 2, mean, na.rm = TRUE)*100
str(rate.by.item)
rate.by.item <- as.matrix(rate.by.item, 25)
dimnames(rate.by.item) <- list("문항" =  paste("문", 1:25, sep = ""), "정답률" = "정답률")
# colnames(rate.by.item) <- "정답률"
```
str(rate.by.item)
literacy.roll <- read.xlsx("../data/literacy_RnB0309.xlsx", 1, startRow = 3, endRow  = 66, colIndex = c(3:7, 9:35), colClasses = c(rep("character", 32)), header = FALSE, stringsAsFactors = FALSE)
names(literacy.roll) <- c("dept", "id", "name", "year", "e.mail", "cell.no", paste("Q", 1:25, sep = ""), "group")
(na.group <- is.na(literacy.roll$group))
table(literacy.roll$group, exclude = NULL)
(na.id <- literacy.roll$id[na.group])
?mapply
x <- list(a = 1:4, b = 4:10, c = 11:20)
y <- list(d = 21:10, e = 7:5, f = 4:1)
mapply(sum, list(x, y))
mapply(sum, x
)
mapply(summary, list(x, y))
mapply(mean, list(x, y))
mapply(length, list(x, y))
mapply(class, list(x, y))
sapply(length, list(x, y))
sapply(list(x, y), length)
sapply(list(x, y), summary)
mapply(rep, 1:4, 4:1)
mapply(rep, times = 1:4, 4:1)
mapply(rep, times = 1:4, MoreArgs = list(x = 41))
mapply(rep, times = 1:4, 41
)
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
reading <- read.xlsx("../data/reading160921.xlsx", 1, startRow = 4, endRow = 104, colIndex = c(3:7, 9:32), header = TRUE, stringsAsFactors = FALSE)
library(xlsx)
reading <- read.xlsx("../data/reading160921.xlsx", 1, startRow = 4, endRow = 104, colIndex = c(3:7, 9:32), header = TRUE, stringsAsFactors = FALSE)
str(reading)
quiz0921 <- read.xlsx("../data/quiz0921.xlsx", 1, startRow = 2, endRow = 102, colIndex = c(3:7, 9:14), colClasses=c(rep("character", 11)), stringsAsFactors=FALSE)
str(quiz0921)
names(quiz0921) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "Q1", "Q2", "Q3", "Q4", "group")
na.group <- is.na(quiz0921$group)
na.group
load("./red_and_black_160907_data.rda")
quiz0921 <- read.xlsx("../data/quiz0921.xlsx", 1, startRow = 2, endRow = 102, colIndex = c(3:7, 9:14), colClasses=c(rep("character", 11)), stringsAsFactors=FALSE)
str(quiz0921)
names(quiz0921) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "Q1", "Q2", "Q3", "Q4", "group")
quiz0921$group <- factor(quiz0921$group, levels = c("Red", "Black"))
na.group <- is.na(quiz0921$group)
load("./red_and_black_160907_data.rda")
quiz0921$group[na.group] <- levels(class_roll0907$group[na.group])
quiz0921$dept <- factor(quiz0921$dept)
quiz0921$year <- factor(quiz0921$year)
reading <- read.xlsx("../data/reading160921v2.xlsx", 1, startRow = 4, endRow = 104, colIndex = c(3:7, 9:32), colClasses = c(rep("character", 6), "numeric", rep("character", 2), rep("numeric", 4), rep("character", 7), rep("numeric", 2), rep("character", 7)), header = TRUE, stringsAsFactors = FALSE)
library(xlsx)
reading <- read.xlsx("../data/reading160921v2.xlsx", 1, startRow = 4, endRow = 104, colIndex = c(3:7, 9:32), colClasses = c(rep("character", 6), "numeric", rep("character", 2), rep("numeric", 4), rep("character", 7), rep("numeric", 2), rep("character", 7)), header = TRUE, stringsAsFactors = FALSE)
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602")
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
str(reading)
reading <- read.xlsx("../data/reading160921v2.xlsx", 1, startRow = 4, endRow = 104, colIndex = c(3:7, 9:32), colClasses = c(rep("character", 6), "numeric", rep("character", 2), rep("numeric", 4), rep("character", 7), rep("numeric", 2), rep("character", 7)), header = TRUE, stringsAsFactors = FALSE)
str(reading)
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
install.packages("Rfacebook")
install.packages("Rook")
install.packages("qdap")
library(Rfacebook)
library(Rook)
library(qdap)
install.packages("slam")
fb_oauth <- fbOAuth(app_id="1241897489200219", app_secret="7c7e9f2041f6ed04ff989cd061691f2b",extended_permissions=TRUE)
me <- getUsers("me", token=fb_oauth)
me
pgData <- getPage("stat.in.life", token=fb_oauth, since="2016/08/30", until="2016/09/28")
si <- subset(pgData, comments_count > 1)
si
nop <- length(si$id)
comments <- data.frame(from_id=NULL, from_name=NULL, meaage=NULL, post_id=NULL)
for(i in 1:nop) {
tmp <- getPost(si$id[i], token=fb_oauth, comments=TRUE)
## post id
post.id <- tmp$post$id
## user id : comments
##  comments.user <- tmp$comments$from_id
##  comments.name <- tmp$comments$from_name
##  comments.message <- tmp$comments$message
tmp2 <- tmp$comments[, c("from_id", "from_name", "message")]
tmp2$post_id <- rep(post.id, nrow(tmp2))
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
library(Rfacebook)
library(Rook)
install.packages("Rook")
install.packages("Rfacebook")
install.packages("qdap")
library(Rfacebook)
library(Rook)
library(qdap)
install.packages("qdap")
library(qdap)
install.packages("slam", repos = "http://cran.rstudio.com")
library(qdap)
#save(fb_oauth, file="FBoauth")
fb_oauth <- fbOAuth(app_id="1241897489200219", app_secret="7c7e9f2041f6ed04ff989cd061691f2b",extended_permissions=TRUE)
me <- getUsers("me", token=fb_oauth)
me
library(xlsx)
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, header = TRUE)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, header = TRUE)
plot(GDP, type ="b")
plot(GDP, type ="l")
par(family = "HCR Dotum LVT")
plot(GDP, type ="b")
plot(GDP)
plot(GDP, type = "b", pch = 17)
?plot
str(GDP)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, header = TRUE, stringsAsfactors = FALSE)
plot(GDP, type = "b", pch = 17)
plot(GDP, type = "b")
str(GDP)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, header = TRUE, stringsAsFactors = FALSE)
str(GDP)
plot(GDP, type = "b")
plot(GDP, type = "b", pch = 17)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, header = TRUE, stringsAsFactors = FALSE)
plot(GDP, type = "b")
str(GDP)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, colClasses = rep("numeric", 2), header = TRUE, stringsAsFactors = FALSE)
str(GDP)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, colClasses = c("integer", "numeric"), header = TRUE, stringsAsFactors = FALSE)
str(GDP)
plot(GDP, type = "b", pch = 17)
plot(GDP, type = "b", pch = 17, yaxt = "")
plot(GDP, type = "b", pch = 17, yaxt = "n")
axis(side = 2, at = seq(0, 30000, by = 5000), labels = paste(seq(0, 30, by = 5), "만불", sep = "", las = 2)
)
plot(GDP, type = "b", pch = 17, yaxt = "n")
axis(side = 2, at = seq(0, 30000, by = 5000), labels = paste(seq(0, 30, by = 5), "천불", sep = "", las = 1)
)
plot(GDP, type = "b", pch = 17, yaxt = "n")
axis(side = 2, at = seq(0, 30000, by = 5000), labels = paste(seq(0, 30, by = 5), "천불", sep = ""), las = 2)
plot(GDP, type = "b", pch = 17, yaxt = "n", xlim = c(1950, 2020), ylim = c(0, 30000))
axis(side = 2, at = seq(0, 30000, by = 5000), labels = paste(seq(0, 30, by = 5), "천불", sep = ""), las = 2)
abline(h = seq(0, 30000, by = 5000), lty = 4)
plot(GDP, type = "b", pch = 17, yaxt = "n", ylab = "", xlim = c(1950, 2020), ylim = c(0, 30000))
axis(side = 2, at = seq(0, 30000, by = 5000), labels = paste(seq(0, 30, by = 5), "천불", sep = ""), las = 2)
abline(h = seq(0, 30000, by = 5000), lty = 3)
GDP$시점 %in% event.year
event.year <- c(1977, 1989, 1994, 1998, 2006, 2009, 2015)
text(x = event.year, y = GDP[GDP$시점 %in% event.year, 2], labels = "천불돌파")
par(family = "HCR Dotum LVT")
plot(GDP, type = "b", pch = 17, yaxt = "n", ylab = "", xlim = c(1950, 2020), ylim = c(0, 30000))
axis(side = 2, at = seq(0, 30000, by = 5000), labels = paste(seq(0, 30, by = 5), "천불", sep = ""), las = 2)
abline(h = seq(0, 30000, by = 5000), lty = 3)
event.year <- c(1977, 1989, 1994, 1998, 2006, 2009, 2015)
text(x = event.year, y = GDP[GDP$시점 %in% event.year, 2], labels = c("천불", "오천불", "만불", "IMF", "서브프라임\n 위기")
)
1980-1953
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, colClasses = c("integer", "numeric"), header = TRUE, stringsAsFactors = FALSE)
library(xlsx)
GDP <- read.xlsx("../data/GDP_per_Capita.xlsx", 1, colIndex = 2:3, colClasses = c("integer", "numeric"), header = TRUE, stringsAsFactors = FALSE)
str(GDP)
year <- GDP$시점
gdp <- GDP$데이터
event.year <- c(1953, 1977, 1989, 1994, 1998, 2006, 2009, 2015)
gov.year <- c(1953, 1979, 1987, 1992, 1997, 2002, 2007, 2012, 2015)
gov.period <- diff(gov.year)
gdp[year %in% event.year]
head(gdp[year% in% event.year], -1)
gdp[year %in% event.year]
head(gdp[year %in% event.year], -1)
tail(gdp[year %in% event.year], -1)
rate <- gdp.tail/gdp.head
gdp.head <- head(gdp[year %in% event.year], -1)
gdp.tail <- tail(gdp[year %in% event.year], -1)
rate <- gdp.tail/gdp.head
rate
rate <- (gdp.tail/gdp.head)^1/(gov.period) - 1
rate <- (gdp.tail/gdp.head)^(1/(gov.period)) - 1
length(gdp.tail/gdp.head)
length(gov.period)
gov.year <- c(1953, 1979, 1987, 1992, 1997, 2002, 2007, 2012, 2015)
gov.period <- diff(gov.year)
gdp[year %in% gov.year]
gdp.head <- head(gdp[year %in% gov.year], -1)
gdp.tail <- tail(gdp[year %in% gov.year], -1)
rate <- (gdp.tail/gdp.head)^(1/(gov.period)) - 1
rate
gov.year <- c(1953, 1980, 1988, 1993, 1998, 2003, 2008, 2013, 2015)
gov.period <- diff(gov.year)
gdp[year %in% gov.year]
gdp.head <- head(gdp[year %in% gov.year], -1)
gdp.tail <- tail(gdp[year %in% gov.year], -1)
rate <- (gdp.tail/gdp.head)^(1/(gov.period)) - 1
rate
install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"))
install.packages(c("bookdown", "cluster", "codetools", "colorspace",
install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"))
install.packages(c("bookdown", "cluster", "codetools", "colorspace",
)
install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"), repos = "http://cran.rstudio.com")
install.packages(c("bookdown", "cluster", "codetools", "colorspace",
)
a <- install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"), repos = "http://cran.rstudio.com")
install.packages(c("bookdown", "cluster", "codetools", "colorspace",
a <- install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"), repos = "http://cran.rstudio.com")
install.packages(c("bookdown", "cluster", "codetools", "colorspace",
install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"))
install.packages(c("bookdown", "cluster", "codetools", "colorspace",
install.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"))
)
update.packages(c("bookdown", "cluster", "codetools", "colorspace", "crayon", "curl", "DBI", "devtools", "DT", "evaluate", "foreign", "htmlwidgets", "httr", "irlba", "jsonlite", "knitr", "lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych", "R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi", "survival", "webshot", "withr"))
install.packages("crayon")
install.packages("curl")
install.packages("DBI")
install.packages("devtools")
install.packages("DT")
install.packages("evaluate")
install.packages("foreign")
install.packages("htmlwidgets")
install.packages("httr")
install.packages("irlba")
install.packages("jsonlite")
install.packages("knitr")
install.packages(c("lattice", "lubridate", "maps", "Matrix", "mgcv", "mime", "mnormt", "packrat", "psych"))
install.packages(c("R6", "reshape2", "RgoogleMaps", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "slam", "stringi"))
install.packages(c("R6", "reshape2", "RgoogleMaps", "rmarkdown",
install.packages(c("R6", "reshape2", "RgoogleMaps"))
)
install.packages(c("R6", "reshape2", "RgoogleMaps"))
update.packages()
install.packages("slam")
update.packages()
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
factor()
?factor
ordered(4:1)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("pander", repos = "https://cran.rstudio.com")
# install.packages("xlsx", repos = "https://cran.rstudio.com")
library(xlsx)
library(pander)
library(knitr)
panderOptions('table.split.table', Inf)
panderOptions('table.alignment.rownames', 'left')
panderOptions('table.alignment.default', 'right')
options(width = 180)
quiz1114 <- read.xlsx("../data/quiz1114v2.xlsx", 1, startRow = 2, endRow = 97, colIndex = c(3:7, 9:14), colClasses = c(rep("character", 11)), stringsAsFactors = FALSE)
str(quiz1114)
names(quiz1114) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "Q1", "Q2", "Q3", "Q4", "group")
quiz1114$dept <- factor(quiz1114$dept)
quiz1114$year <- factor(quiz1114$year)
quiz1114$group <- factor(quiz1114$group, levels = c("Red", "Black"))
quiz1114$Q1
# strsplit(quiz1114$Q1, ",")
BFI.strsplit <- strsplit(quiz1114$Q1, ",")
# str(BFI.strsplit)
# BFI.first <- mapply(function(x) sapply(x, substr, 1, 1), BFI.strsplit)
# BFI.str.collapse <- mapply(function(x) paste(x, sep ="", collapse = ""), BFI.strsplit)
# BFI.replies <- mapply(function(x) substring(x, first = c(1, 4, 7, 10, 13), last = c(1, 4, 7, 10, 13)), BFI.str.collapse)
BFI.ans <- strsplit("개방성,성실성,외향성,친화성,신경성", split = ",")
BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), BFI.strsplit)
# BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), BFI.first)
# BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), data.frame(BFI.replies))
BFI.score <- apply(BFI.count, 2, sum)
quiz1114$Q2[49]
MI.strsplit <- strsplit(quiz1114$Q2, ",")
# str(MI.strsplit)
# MI.first <- mapply(function(x) sapply(x, substr, 1, 1), MI.strsplit)
# MI.str.collapse <- mapply(function(x) paste(x, sep ="", collapse = ""), MI.strsplit)
# MI.replies <- mapply(function(x) substring(x, first = c(1, 4, 7, 10, 13), last = c(1, 4, 7, 10, 13)), MI.str.collapse)
MI.strsplit[[49]]
MI.ans <- strsplit("신체운동,음악,공간,자기성찰,자연친화,논리수학,언어,인간친화", split = ",")
MI.count <- mapply(function(x) ifelse(x == unlist(MI.ans), 1, 0), MI.strsplit)
# MI.count <- mapply(function(x) ifelse(x == unlist(MI.ans), 1, 0), data.frame(MI.replies))
MI.score <- apply(MI.count, 2, sum)
quiz1114[c("Q3", "Q4", "group")]
quiz1114$Q3.2 <- quiz1114$Q3
Black <- quiz1114$group == "Black"
Red <- quiz1114$group == "Red"
quiz1114$Q3.2[Black] <- ifelse(quiz1114$Q3[Black] == "Beer,17", "Right", "Wrong")
quiz1114$Q3.2[Red] <- ifelse(quiz1114$Q3[Red] == "A,3", "Right", "Wrong")
# quiz1114$Q3.2[quiz1114$group == "Black" & quiz1114$Q3 == "Beer,17"] <- "Right"
# quiz1114$Q3.2[quiz1114$group == "Black" & quiz1114$Q3 != "Beer,17"] <- "Wrong"
# quiz1114$Q3.2[quiz1114$group == "Red" & quiz1114$Q3 == "A,3"] <- "Right"
# quiz1114$Q3.2[quiz1114$group == "Red" & quiz1114$Q3 != "A,3"] <- "Wrong"
quiz1114$Q3.2
quiz1114$Q4.2 <- quiz1114$Q4
quiz1114$Q4.2[Black] <- ifelse(quiz1114$Q4[Black] == "A,3", "Right", "Wrong")
quiz1114$Q4.2[Red] <- ifelse(quiz1114$Q4[Red] == "Beer,17", "Right", "Wrong")
# quiz1114$Q4.2[quiz1114$group == "Black" & quiz1114$Q4 == "A,3"] <- "Right"
# quiz1114$Q4.2[quiz1114$group == "Black" & quiz1114$Q4 != "A,3"] <- "Wrong"
# quiz1114$Q4.2[quiz1114$group == "Red" & quiz1114$Q4 == "Beer,17"] <- "Right"
# quiz1114$Q4.2[quiz1114$group == "Red" & quiz1114$Q4 != "Beer,17"] <- "Wrong"
quiz1114[c("Q3", "Q3.2", "Q4", "Q4.2", "group")]
str(quiz1114)
quiz1114 <- read.xlsx("../data/quiz1114v2.xlsx", 1, startRow = 2, endRow = 97, colIndex = c(3:7, 9:14), colClasses = c(rep("character", 11)), stringsAsFactors = FALSE)
setwd("~/Google 드라이브/Works/Class/Statistics/R.WD/Class_data/class201602/R")
quiz1114 <- read.xlsx("../data/quiz1114v2.xlsx", 1, startRow = 2, endRow = 97, colIndex = c(3:7, 9:14), colClasses = c(rep("character", 11)), stringsAsFactors = FALSE)
str(quiz1114)
names(quiz1114) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "Q1", "Q2", "Q3", "Q4", "group")
quiz1114$dept <- factor(quiz1114$dept)
quiz1114$year <- factor(quiz1114$year)
quiz1114$group <- factor(quiz1114$group, levels = c("Red", "Black"))
quiz1114$Q1
# strsplit(quiz1114$Q1, ",")
BFI.strsplit <- strsplit(quiz1114$Q1, ",")
# str(BFI.strsplit)
# BFI.first <- mapply(function(x) sapply(x, substr, 1, 1), BFI.strsplit)
# BFI.str.collapse <- mapply(function(x) paste(x, sep ="", collapse = ""), BFI.strsplit)
# BFI.replies <- mapply(function(x) substring(x, first = c(1, 4, 7, 10, 13), last = c(1, 4, 7, 10, 13)), BFI.str.collapse)
BFI.ans <- strsplit("개방성,성실성,외향성,친화성,신경성", split = ",")
BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), BFI.strsplit)
# BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), BFI.first)
# BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), data.frame(BFI.replies))
BFI.score <- apply(BFI.count, 2, sum)
quiz1114$Q2[49]
MI.strsplit <- strsplit(quiz1114$Q2, ",")
# str(MI.strsplit)
# MI.first <- mapply(function(x) sapply(x, substr, 1, 1), MI.strsplit)
# MI.str.collapse <- mapply(function(x) paste(x, sep ="", collapse = ""), MI.strsplit)
# MI.replies <- mapply(function(x) substring(x, first = c(1, 4, 7, 10, 13), last = c(1, 4, 7, 10, 13)), MI.str.collapse)
MI.strsplit[[49]]
MI.ans <- strsplit("신체운동,음악,공간,자기성찰,자연친화,논리수학,언어,인간친화", split = ",")
MI.count <- mapply(function(x) ifelse(x == unlist(MI.ans), 1, 0), MI.strsplit)
# MI.count <- mapply(function(x) ifelse(x == unlist(MI.ans), 1, 0), data.frame(MI.replies))
MI.score <- apply(MI.count, 2, sum)
quiz1114[c("Q3", "Q4", "group")]
quiz1114$Q3.2 <- quiz1114$Q3
Black <- quiz1114$group == "Black"
Red <- quiz1114$group == "Red"
quiz1114$Q3.2[Black] <- ifelse(quiz1114$Q3[Black] == "Beer,17", "Right", "Wrong")
quiz1114$Q3.2[Red] <- ifelse(quiz1114$Q3[Red] == "A,3", "Right", "Wrong")
# quiz1114$Q3.2[quiz1114$group == "Black" & quiz1114$Q3 == "Beer,17"] <- "Right"
# quiz1114$Q3.2[quiz1114$group == "Black" & quiz1114$Q3 != "Beer,17"] <- "Wrong"
# quiz1114$Q3.2[quiz1114$group == "Red" & quiz1114$Q3 == "A,3"] <- "Right"
# quiz1114$Q3.2[quiz1114$group == "Red" & quiz1114$Q3 != "A,3"] <- "Wrong"
quiz1114$Q3.2
quiz1114$Q4.2 <- quiz1114$Q4
quiz1114$Q4.2[Black] <- ifelse(quiz1114$Q4[Black] == "A,3", "Right", "Wrong")
quiz1114$Q4.2[Red] <- ifelse(quiz1114$Q4[Red] == "Beer,17", "Right", "Wrong")
# quiz1114$Q4.2[quiz1114$group == "Black" & quiz1114$Q4 == "A,3"] <- "Right"
# quiz1114$Q4.2[quiz1114$group == "Black" & quiz1114$Q4 != "A,3"] <- "Wrong"
# quiz1114$Q4.2[quiz1114$group == "Red" & quiz1114$Q4 == "Beer,17"] <- "Right"
# quiz1114$Q4.2[quiz1114$group == "Red" & quiz1114$Q4 != "Beer,17"] <- "Wrong"
quiz1114[c("Q3", "Q3.2", "Q4", "Q4.2", "group")]
str(quiz1114)
pander(summary(quiz1114))
BFI.tbl <- table(quiz1114$group, BFI.score, useNA = "ifany")
BFI.tbl.a <- addmargins(BFI.tbl)
rownames(BFI.tbl.a)[3] <- "계"
colnames(BFI.tbl.a)[4:5] <- c("결석", "계")
BFI.tbl.a
BFI.tbl.p <- round(prop.table(table(BFI.score))*100, digits = 2)
BFI.tbl.a.m <- addmargins(BFI.tbl.p, margin = 1)
BFI.tbl.a.m
quiz1114$Q3.2[Black] <- ifelse(quiz1114$Q3[Black] == "조퇴", "조퇴", ifelse(quiz1114$Q3[Black] == "Beer,17", "Right", "Wrong"))
quiz1114$Q3.2[Red] <- ifelse(quiz1114$Q3[Black] == "조퇴", "조퇴", ifelse(quiz1114$Q3[Red] == "A,3", "Right", "Wrong"))
quiz1114$Q3.2[Red] <- ifelse(quiz1114$Q3[Red] == "조퇴", "조퇴", ifelse(quiz1114$Q3[Red] == "A,3", "Right", "Wrong"))
quiz1114 <- read.xlsx("../data/quiz1114.xlsx", 1, startRow = 2, endRow = 97, colIndex = c(3:7, 9:14), colClasses = c(rep("character", 11)), stringsAsFactors = FALSE)
str(quiz1114)
names(quiz1114) <- c("dept", "id", "name", "year", "e.mail", "cell.no", "Q1", "Q2", "Q3", "Q4", "group")
quiz1114$dept <- factor(quiz1114$dept)
quiz1114$year <- factor(quiz1114$year)
quiz1114$group <- factor(quiz1114$group, levels = c("Red", "Black"))
quiz1114$Q1
# strsplit(quiz1114$Q1, ",")
BFI.strsplit <- strsplit(quiz1114$Q1, ",")
# str(BFI.strsplit)
# BFI.first <- mapply(function(x) sapply(x, substr, 1, 1), BFI.strsplit)
# BFI.str.collapse <- mapply(function(x) paste(x, sep ="", collapse = ""), BFI.strsplit)
# BFI.replies <- mapply(function(x) substring(x, first = c(1, 4, 7, 10, 13), last = c(1, 4, 7, 10, 13)), BFI.str.collapse)
BFI.ans <- strsplit("개방성,성실성,외향성,친화성,신경성", split = ",")
BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), BFI.strsplit)
# BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), BFI.first)
# BFI.count <- mapply(function(x) ifelse(x == unlist(BFI.ans), 1, 0), data.frame(BFI.replies))
BFI.score <- apply(BFI.count, 2, sum)
quiz1114$Q2[49]
MI.strsplit <- strsplit(quiz1114$Q2, ",")
# str(MI.strsplit)
# MI.first <- mapply(function(x) sapply(x, substr, 1, 1), MI.strsplit)
# MI.str.collapse <- mapply(function(x) paste(x, sep ="", collapse = ""), MI.strsplit)
# MI.replies <- mapply(function(x) substring(x, first = c(1, 4, 7, 10, 13), last = c(1, 4, 7, 10, 13)), MI.str.collapse)
MI.strsplit[[49]]
MI.ans <- strsplit("신체운동,음악,공간,자기성찰,자연친화,논리수학,언어,인간친화", split = ",")
MI.count <- mapply(function(x) ifelse(x == unlist(MI.ans), 1, 0), MI.strsplit)
# MI.count <- mapply(function(x) ifelse(x == unlist(MI.ans), 1, 0), data.frame(MI.replies))
MI.score <- apply(MI.count, 2, sum)
quiz1114[c("Q3", "Q4", "group")]
quiz1114$Q3.2 <- quiz1114$Q3
Black <- quiz1114$group == "Black"
Red <- quiz1114$group == "Red"
quiz1114$Q3.2[Black] <- ifelse(quiz1114$Q3[Black] == "조퇴", "조퇴", ifelse(quiz1114$Q3[Black] == "Beer,17", "Right", "Wrong"))
quiz1114$Q3.2[Red] <- ifelse(quiz1114$Q3[Red] == "조퇴", "조퇴", ifelse(quiz1114$Q3[Red] == "A,3", "Right", "Wrong"))
# quiz1114$Q3.2[Black] <- ifelse(quiz1114$Q3[Black] == "Beer,17", "Right", "Wrong")
# quiz1114$Q3.2[Red] <- ifelse(quiz1114$Q3[Red] == "A,3", "Right", "Wrong")
# quiz1114$Q3.2[quiz1114$group == "Black" & quiz1114$Q3 == "Beer,17"] <- "Right"
# quiz1114$Q3.2[quiz1114$group == "Black" & quiz1114$Q3 != "Beer,17"] <- "Wrong"
# quiz1114$Q3.2[quiz1114$group == "Red" & quiz1114$Q3 == "A,3"] <- "Right"
# quiz1114$Q3.2[quiz1114$group == "Red" & quiz1114$Q3 != "A,3"] <- "Wrong"
quiz1114$Q3.2
quiz1114$Q4.2 <- quiz1114$Q4
quiz1114$Q4.2[Black] <- ifelse(quiz1114$Q4[Black] == "조퇴", "조퇴", ifelse(quiz1114$Q4[Black] == "A,3", "Right", "Wrong"))
quiz1114$Q4.2[Red] <- ifelse(quiz1114$Q4[Red] == "조퇴", "조퇴", ifelse(quiz1114$Q4[Red] == "Beer,17", "Right", "Wrong"))
# quiz1114$Q4.2[Black] <- ifelse(quiz1114$Q4[Black] == "A,3", "Right", "Wrong")
# quiz1114$Q4.2[Red] <- ifelse(quiz1114$Q4[Red] == "Beer,17", "Right", "Wrong")
# quiz1114$Q4.2[quiz1114$group == "Black" & quiz1114$Q4 == "A,3"] <- "Right"
# quiz1114$Q4.2[quiz1114$group == "Black" & quiz1114$Q4 != "A,3"] <- "Wrong"
# quiz1114$Q4.2[quiz1114$group == "Red" & quiz1114$Q4 == "Beer,17"] <- "Right"
# quiz1114$Q4.2[quiz1114$group == "Red" & quiz1114$Q4 != "Beer,17"] <- "Wrong"
quiz1114[c("Q3", "Q3.2", "Q4", "Q4.2", "group")]
str(quiz1114)
prop.table(tbl.q4.a[, -3], margin = 1)*100
tbl.q4.a <- addmargins(table(quiz1114$group, quiz1114$Q4.2, useNA = "ifany"), margin = 1)
rownames(tbl.q4.a) <- c("Red(구체적 질문 먼저)", "Black(추상적 질문 먼저)", "계")
colnames(tbl.q4.a) <- c("정답", "오답", "조퇴", "계")
kable(tbl.q4.a)
prop.table(tbl.q4.a[, -3], margin = 1)*100
